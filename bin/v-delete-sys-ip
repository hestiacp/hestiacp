#!/bin/bash
# info: delete system IP
# both kind of IP addresses, ipv4 and ipv6 are allowed
# options: IP
#
# example: v-delete-sys-ip 203.0.113.1
# example: v-delete-sys-ip 1234:5678:abcd:ef90::1

#----------------------------------------------------------#
#                      Functions                           #
#----------------------------------------------------------#
# Normalizes an IPv4 or IPv6 address to its canonical form using PHP's inet_ntop().
# This is needed because bash utilities don't always normalize IPv6 notation,
# but the config files and lookups may require canonical format for correct matching.
normalize_ip() {
	php -r "echo inet_ntop(inet_pton('$1'));" 2> /dev/null
}

#----------------------------------------------------------#
#                 Initialization & Includes                #
#----------------------------------------------------------#

raw_ip=${1%/*}
ip46=$raw_ip

source /etc/hestiacp/hestia.conf
source ${HESTIA}/func/main.sh
source ${HESTIA}/func/ip.sh
source ${HESTIA}/func/domain.sh
source_conf "$HESTIA/conf/hestia.conf"

#----------------------------------------------------------#
#                     Verifications                        #
#----------------------------------------------------------#

check_args '1' "$#" 'IP'
ip_format="$(get_ip_format ${ip46})"
retval=$?

check_ip_par=""
add_cap_string_ipv6=""

[ -n "$ip_format" ] && [[ $ip_format -eq 4 || $ip_format -eq 6 ]] && check_ip_par=" -${ip_format}"

if [ -n "$ip_format" ]; then
	if [ "$ip_format" -eq 6 ]; then
		ip=""
		ipv6="$ip46"
		add_cap_string_ipv6="V6"
		is_format_valid 'ipv6'
		is_ipv6_valid "$ipv6"
	else
		ip="$ip46"
		ipv6=""
		is_format_valid 'ip'
		is_ip_valid "$ip"
	fi
else
	check_result $retval "${ip46} is not a valid IPV4/IPV6 address!"
fi

is_ip_key_empty '$U_WEB_DOMAINS' ${ip46}
is_ip_key_empty '$U_SYS_USERS' ${ip46}
check_hestia_demo_mode

#----------------------------------------------------------#
#                  Load IP Configuration                   #
#----------------------------------------------------------#

ip_file="${HESTIA}/data/ips/${raw_ip}"

if [ -f "$ip_file" ]; then
	source "$ip_file"
	if [[ "$ip_format" == "4" && "$NETMASK" =~ ^([0-9]+\.){3}[0-9]+$ ]]; then
        # Convierte la máscara de puntos a número de bits
        IFS=. read -r i1 i2 i3 i4 <<< "$NETMASK"
        binmask=$(printf '%08d%08d%08d%08d\n' \
            "$(bc <<< "obase=2;$i1")" \
            "$(bc <<< "obase=2;$i2")" \
            "$(bc <<< "obase=2;$i3")" \
            "$(bc <<< "obase=2;$i4")")
        prefix_length=$(tr -cd '1' <<< "$binmask" | wc -c)
        NETMASK="/$prefix_length"
    fi
else
	echo "Warning: IP config file not found at $ip_file"
	if [[ "$ip46" == *:* ]]; then
		interface=$(ip -6 addr show | awk -v ip="$ip46" '$2 == "inet6" && $4 ~ ip { print $NF; exit }')
	else
		interface=$(ip -4 addr show | awk -v ip="$ip46" '$2 == "inet" && $4 ~ ip { print $NF; exit }')
	fi
	[ -z "$interface" ] && interface="eth0"
	ip_format="$(get_ip_format ${ip46})"
	NETMASK="/$([[ "$ip_format" = "6" ]] && echo "128" || echo "32")"
	INTERFACE="$interface"
	OWNER="$ROOT_USER"
	STATUS="dedicated"
fi

#----------------------------------------------------------#
#                 Normalize and Check                      #
#----------------------------------------------------------#

# Convert NETMASK to prefix if necessary (IPv4)
if [[ "$ip_format" == "4" && "$NETMASK" =~ ^([0-9]+\.){3}[0-9]+$ ]]; then
    IFS=. read -r i1 i2 i3 i4 <<< "$NETMASK"
    binmask=$(printf '%08d%08d%08d%08d\n' \
        "$(bc <<< "obase=2;$i1")" \
        "$(bc <<< "obase=2;$i2")" \
        "$(bc <<< "obase=2;$i3")" \
        "$(bc <<< "obase=2;$i4")")
    prefix_length=$(tr -cd '1' <<< "$binmask" | wc -c)
    NETMASK="/$prefix_length"
fi

prefix_length=${NETMASK#/}
[[ "$ip_format" = "6" ]] && max_prefix=128 || max_prefix=32

if ! [[ "$prefix_length" =~ ^[0-9]{1,3}$ ]] || ((prefix_length < 0 || prefix_length > max_prefix)); then
    echo "Error: invalid prefix length: $prefix_length"
    exit 1
fi

# Find the interface where the IP is assigned in Hestia; if not, search in the system
interface=$(awk -v ip="$(normalize_ip "$raw_ip")" '$1 == ip { print $3 }' <($BIN/v-list-network plain))
if [ -z "$interface" ]; then
    if [ "$ip_format" = "6" ]; then
        interface=$(ip -6 addr show | awk "/$ip46/ { print \$NF; exit }")
    else
        interface=$(ip -4 addr show | awk "/$ip46/ { print \$NF; exit }")
    fi
fi

# Detect and set the correct CIDR prefix for the IP to be deleted
if [ "$ip_format" = "6" ]; then
    cidr_prefixlen=$(ip -6 addr show dev "$interface" | awk "/$ip46/ { match(\$0, \"/[0-9]+\", arr); print arr[0] }")
    [ -z "$cidr_prefixlen" ] && cidr_prefixlen="/128"
else
    cidr_prefixlen=$(ip -4 addr show dev "$interface" | awk "/$ip46/ { match(\$0, \"/[0-9]+\", arr); print arr[0] }")
    [ -z "$cidr_prefixlen" ] && cidr_prefixlen="/32"
fi

number_of_ips=$(/sbin/ip${check_ip_par} addr | grep -c global)
host_ip_check=$(hostname -i | sed -ne "/$ip46/p")

if [[ (-n "$host_ip_check" && -n "$interface") || ($number_of_ips -eq 1) ]]; then
    echo "Error: can't delete primary IP address"
    log_event "$E_FORBIDEN" "$ARGUMENTS"
    exit "$E_FORBIDEN"
fi

ip46=$(normalize_ip "$ip46")

#----------------------------------------------------------#
#                    Delete IP from system                 #
#----------------------------------------------------------#

if [ "$ip_format" = "6" ]; then
	ip -6 addr del "$ip46$cidr_prefixlen" dev "$interface"
else
	ip addr del "$ip46$cidr_prefixlen" dev "$interface"
fi

[ "$?" -ne 0 ] && {
	echo "Error: can't delete system IP address"
	log_event "$E_FORBIDEN" "$ARGUMENTS"
	exit "$E_FORBIDEN"
}

#----------------------------------------------------------#
#                    Clean Config Files                    #
#----------------------------------------------------------#

if [ -f "/etc/netplan/60-hestia.yaml" ]; then
	sed -i "/$ip46/d" /etc/netplan/60-hestia.yaml
	! grep -q '-' /etc/netplan/60-hestia.yaml && rm /etc/netplan/60-hestia.yaml
elif [ -e "/etc/network/interfaces" ]; then
	filter_ip="$ip46$cidr_prefixlen"
	ip_str=$(grep -n "$filter_ip" /etc/network/interfaces | cut -f1 -d:)
	[ -n "$ip_str" ] && sed -i "$((ip_str - 4)),$((ip_str + 1))d" /etc/network/interfaces
fi

#----------------------------------------------------------#
#                   Update Counters & Logs                 #
#----------------------------------------------------------#

decrease_user_value "$OWNER" "IP_OWNED"
if [ "$OWNER" = "$ROOT_USER" ]; then
	if [ "$STATUS" = 'shared' ]; then
		for hestia_user in $(${BIN}/v-list-sys-users plain); do
			decrease_user_value "$hestia_user" "IP_AVAIL"
		done
	else
		decrease_user_value "$OWNER" "IP_AVAIL"
	fi
else
	decrease_user_value "$OWNER" "IP_AVAIL"
	decrease_user_value "$ROOT_USER" "IP_AVAIL"
fi

grep IP_OWNED /usr/local/hestia/data/users/$OWNER/user.conf

#----------------------------------------------------------#
#                    Clean Hestia Data                     #
#----------------------------------------------------------#

rm -f ${HESTIA}/data/ips/${raw_ip}

if [ -n "$WEB_SYSTEM" ]; then
	rm -f /etc/${WEB_SYSTEM}/conf.d/${raw_ip}.conf
fi

if [ -n "$PROXY_SYSTEM" ]; then
	rm -f /etc/${PROXY_SYSTEM}/conf.d/${raw_ip}.conf
	sed -i "/$ip46/d" /etc/${WEB_SYSTEM}/mods-enabled/rpaf.conf 2> /dev/null
	sed -i "/$ip46\$/d" /etc/${WEB_SYSTEM}/mods-enabled/remoteip.conf 2> /dev/null
fi

${BIN}/v-restart-web > /dev/null
[ -n "$PROXY_SYSTEM" ] && ${BIN}/v-restart-proxy > /dev/null
[ -n "$FIREWALL_SYSTEM" ] && ${BIN}/v-update-firewall

${BIN}/v-log-action "system" "Info" "System" "IP address deleted (IP: $ip46)."
log_event "$OK" "$ARGUMENTS"

exit 0
