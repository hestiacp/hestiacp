########################################
# Dovecot conf file modified by Hestia #
########################################

log_path = /var/log/dovecot.log

##############################################
# Original distribution files are located in #
# /usr/share/dovecot/                        #
#                                            #
# Below is a copy of the original file.      #
# All lines starting with #-# were already   #
# uncommented in the original version        #
##############################################

##
## Log destination.
##

# Log file to use for error messages. "syslog" logs to syslog,
# /dev/stderr logs to stderr.
#log_path = syslog

# Log file to use for informational messages. Defaults to log_path.
#info_log_path = 
# Log file to use for debug messages. Defaults to info_log_path.
#debug_log_path = 

# Syslog facility to use if you're logging to syslog. Usually if you don't
# want to use "mail", you'll use local0..local7. Also other standard
# facilities are supported.
#syslog_facility = mail

##
## Logging verbosity and debugging.
##

# Log unsuccessful authentication attempts and the reasons why they failed.
#auth_verbose = yes

# In case of password mismatches, log the attempted password. Valid values are
# no, plain and sha1. sha1 can be useful for detecting brute force password
# attempts vs. user simply trying the same password over and over again.
#auth_verbose_passwords = no

# To chain multiple logging conditions you can use,
# log_debug=$SET:log_debug or category=xxx

# Even more verbose logging for debugging purposes. Shows for example SQL
# queries.
#log_debug=category=auth
#
# In case of password mismatches, log the passwords and used scheme so the
# problem can be debugged. Enabling this also enables auth_debug.
#auth_debug_passwords = yes

# Enable mail process debugging. This can help you figure out why Dovecot
# isn't finding your mails.
#log_debug=category=mail

# Show protocol level SSL errors.
#log_debug=category=ssl

# mail_log plugin provides more event logging for mail processes.
#mail_plugins {
#   notify = yes
#   mail_log = yes
#}
# Events to log. Also available: flag_change append
#mail_log_events = delete undelete expunge copy mailbox_delete mailbox_rename flag_change append
# Available fields: uid, box, msgid, from, subject, size, vsize, flags
# size and vsize are available only for expunge and copy events.
#mail_log_fields = uid box msgid size from subject vsize flags
# only log cached fields
#mail_log_cached_only = yes

##
## Log formatting.
##

# Prefix for each line written to log file. % codes are in strftime(3)
# format.
#log_timestamp = "%b %d %H:%M:%S "

# Space-separated list of elements we want to log. The elements which have
# a non-empty variable value are joined together to form a comma-separated
# string.
#login_log_format_elements = user=<%{user}> method=%{mechanism} rip=%{remote_ip} lip=%{local_ip} mpid=%{mail_pid} %{secured} session=<%{session}>

# Login log format. %{elements} contains login_log_format_elements string, %{message} contains
# the data we want to log.
#login_log_format = %{message}: %{elements}
 
# Log prefix for mail processes. See
# https://doc.dovecot.org/latest/core/settings/variables.html#mail-service-user-variables
# for list of possible variables.
#mail_log_prefix = "%{service}(%{user})<%{process:pid}><%{session}>: "

# Format to use for logging mail deliveries. See https://doc.dovecot.org/latest/core/summaries/settings.html#deliver_log_format
# for list of possible variables.
#deliver_log_format = msgid=%{msgid}: %{message} (subject=%{subject} from=%{from} size=%{size})
