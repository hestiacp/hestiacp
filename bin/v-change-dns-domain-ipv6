#!/bin/bash
# info: change dns domain ip address
# options: USER DOMAIN IPV6 [RESTART]
#
# example: v-change-dns-domain-ipv6 admin domain.com 1111:2222::1
#
# This function for changing the main ipv6 of DNS zone.

#----------------------------------------------------------#
#                Variables & Functions                     #
#----------------------------------------------------------#

# Argument definition
user=$1
domain=$2
domain_idn=$2
ipv6=$3
restart=$4

# Includes
# shellcheck source=/etc/hestiacp/hestia.conf
source /etc/hestiacp/hestia.conf
# shellcheck source=/usr/local/hestia/func/main.sh
source $HESTIA/func/main.sh
# shellcheck source=/usr/local/hestia/func/domain.sh
source $HESTIA/func/domain.sh
# shellcheck source=/usr/local/hestia/func/ip.sh
source $HESTIA/func/ip.sh
# shellcheck source=/usr/local/hestia/func/rebuild.sh
source $HESTIA/func/rebuild.sh
# load config file
source_conf "$HESTIA/conf/hestia.conf"

# Additional argument formatting
format_domain
format_domain_idn
# TODO: $domain_idn not used in this script - maybe $domain should be converted to $doman_idn ?

#----------------------------------------------------------#
#                    Verifications                         #
#----------------------------------------------------------#

check_args '3' "$#" 'USER DOMAIN IPV6 [RESTART]'
is_format_valid 'user' 'domain' 'ipv6'
is_system_enabled "$DNS_SYSTEM" 'DNS_SYSTEM'
is_object_valid 'user' 'USER' "$user"
is_object_unsuspended 'user' 'USER' "$user"
is_object_valid 'dns' 'DOMAIN' "$domain"
is_object_unsuspended 'dns' 'DOMAIN' "$domain"

# Perform verification if read-only mode is enabled
check_hestia_demo_mode

#----------------------------------------------------------#
#                       Action                             #
#----------------------------------------------------------#

if [ "$ipv6" != "no" ]; then
	is_format_valid 'ipv6'
fi
if [ "$ipv6" != "no" ]; then
	is_ipv6_valid "$ipv6" "$user"
else
	ipv6=''
fi

# Get old ip
get_domain_values 'dns'
if [ -z "$ipv6" ] && [ -z "$IP" ]; then
	check_result $E_INVALID "IP or IPv6 is required"
fi
old=$IP6

if [ -z "$old" ]; then
	#Create new
	# Generating timestamp
	time_n_date=$(date +'%T %F')
	time=$(echo "$time_n_date" | cut -f 1 -d \ )
	date=$(echo "$time_n_date" | cut -f 2 -d \ )
	ip=""
	add_dns_config_records
else
	if [ ! -z "$ipv6" ]; then
		# Changing records
		sed -i "s/$old/$ipv6/g" $USER_DATA/dns/$domain.conf
	else
		#Delete configs
		ipv6=""
		ip=$IP
		remove_dns_config_records
	fi
fi

# Changing ip
update_object_value 'dns' 'DOMAIN' "$domain" '$IP6' "$ipv6"

#update counters
records="$(wc -l $USER_DATA/dns/$domain.conf | cut -f1 -d ' ')"
update_object_value 'dns' 'DOMAIN' "$domain" '$RECORDS' "$records"
records=$(wc -l $USER_DATA/dns/*.conf | cut -f 1 -d ' ')
update_user_value "$user" '$U_DNS_RECORDS' "$records"

# Updating zone
if [[ "$DNS_SYSTEM" =~ named|bind ]]; then
	rebuild_dns_domain_conf
fi

# Updating dns-cluster queue
if [ "$DNS_CLUSTER" = "yes" ]; then
	# Check for first sync
	dlock=$(grep "domain $user $domain" $HESTIA/data/queue/dns-cluster.pipe)
	if [ -z "$dlock" ]; then
		cmd="$BIN/v-add-remote-dns-domain $user $domain domain yes"
		echo "$cmd" >> $HESTIA/data/queue/dns-cluster.pipe
	fi
fi

#----------------------------------------------------------#
#                       Hestia                             #
#----------------------------------------------------------#

# Restarting named
$BIN/v-restart-dns "$restart"
check_result $? "DNS restart failed" > /dev/null

# Logging
$BIN/v-log-action "$user" "Info" "DNS" "IPV6 address for DNS domain changed (IPV6: $ipv6, Domain: $domain)."
log_event "$OK" "$ARGUMENTS"

exit
